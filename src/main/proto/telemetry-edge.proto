syntax = "proto3";
option java_package = "com.rackspace.salus.services";

service TelemetryAmbassador {
    rpc AttachEnvoy (EnvoySummary) returns (stream EnvoyInstruction) {}
    rpc KeepAlive (KeepAliveRequest) returns (KeepAliveResponse) {}
    rpc PostLogEvent (LogEvent) returns (PostLogEventResponse) {}
    rpc PostMetric (PostedMetric) returns (PostMetricResponse) {}
    rpc PostTestMonitorResults (TestMonitorResults) returns (PostTestMonitorResultsResponse) {}
}

message EnvoySummary {
    string version = 1;

    repeated AgentType supportedAgents = 2;

    map<string, string> labels = 3;

    string resourceId = 4;

    string zone = 5;
}

enum AgentType {
    TELEGRAF = 0;
    FILEBEAT = 1;
}

message Agent {
    AgentType type = 1;
    string version = 2;
}

message EnvoyInstruction {
    oneof details {
        EnvoyInstructionInstall install = 1;
        EnvoyInstructionConfigure configure = 2;
        EnvoyInstructionRefresh refresh = 3;
        EnvoyInstructionTestMonitor testMonitor = 4;
    }
}

message EnvoyInstructionInstall {
    Agent agent = 1;
    string url = 2;
    Checksum checksum = 3;
    // path to the agent's executable within the package
    string exe = 4;
}

message Checksum {
    string value = 1;
    enum Type {
        SHA256 = 0;
        SHA512 = 1;
    }
    Type type = 2;
}

message EnvoyInstructionConfigure {
    AgentType agentType = 1;
    repeated ConfigurationOp operations = 2;
}

message ConfigurationOp {
    string id = 1;
    string revision = 2;
    enum Type {
        CREATE = 0;
        MODIFY = 1;
        REMOVE = 2;
    }
    Type type = 3;
    string content = 4;
    // conveys extra labels/tags that should be associated with the generated measurements
    map<string,string> extraLabels = 5;
}

// mainly used to test the ambassador->envoy liveness of the channel, but could eventually
// contain the full set of instructions of ensure consistency
message EnvoyInstructionRefresh {}

message KeepAliveRequest {
}

message KeepAliveResponse {}

message LogEvent {
    AgentType agentType = 1;
    string jsonContent = 2;
}

message PostLogEventResponse {}

message PostedMetric {
    Metric metric = 1;
}

message Metric {
    oneof variant {
        NameTagValueMetric nameTagValue = 1;
    }
}

message NameTagValueMetric {
    string name = 1;
    // in milliseconds
    int64 timestamp = 2;
    map<string,string> tags = 3;
    map<string,double> fvalues = 4;
    map<string,string> svalues = 5;
    map<string,int64> ivalues = 6;
}

message PostMetricResponse {}

message EnvoyInstructionTestMonitor {
    string correlationId = 1;
    AgentType agentType = 2;
    string content = 3;
    // declares the maximum amount of time in seconds the test operation can run
    int64 timeout = 4;
}

message TestMonitorResults {
    string correlationId = 1;
    repeated string errors = 2;
    repeated Metric metrics = 3;
}

message PostTestMonitorResultsResponse {}